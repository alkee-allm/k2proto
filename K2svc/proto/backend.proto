// server - server 의 service, rpc, message 정의.

syntax = "proto3";

// import "sample.proto";  // 공통 message 를 사용할 수 있으면 좋겠는데.. 경로문제로 쉽지 않네.

package K2B;

message Null {} // same as google.protobuf.Empty

// Services 
service ServerManagement {
	// backend listen
	rpc Register (RegisterRequest) returns (RegisterResponse);
	rpc Unregister (UnregisterRequest) returns (Null); // 정상적인 종료
	rpc Ping (PingRequest) returns (PingResponse);
	rpc Broadcast (PushRequest) returns (Null);

	// frontend listen
	rpc StopF (Null) returns (Null); // 종료 명령
	rpc BroadcastF (PushRequest) returns (Null);
}
service UserSession {
	// backend listen
	rpc AddUser (AddUserRequest) returns (AddUserResponse);
	rpc RemoveUser (RemoveUserRequest) returns (RemoveUserResponse);
	rpc RemoveUsers (RemoveUsersRequest) returns (RemoveUsersResponse);
	//rpc IsOnline (IsOnlineRequest) returns (IsOnlineResponse); // obsolete. use IsOnlineF instead

	rpc KickUser (KickUserRequest) returns (KickUserResponse);
	rpc Push (PushRequest) returns (PushResponse);

	// frontend listen
	rpc KickUserF (KickUserRequest) returns (KickUserResponse);
	rpc PushF (PushRequest) returns (PushResponse);
	rpc IsOnlineF (IsOnlineRequest) returns (IsOnlineResponse);
}

// Messages
message PushRequest {
	message PushResponse { // K2.PushResponse
		enum PushType {
			ERROR = 0;
			MESSAGE = 1;
			CONFIG = 2;
			COMMAND = 3;
		}
		PushType type = 1;
		string message = 2;
		string extra = 3;
	}

	string targetUserId = 1;
	// K2.PushResponse pushMessage = 2;
	PushResponse pushMessage = 2;
}

// ServerManagement ///////////////////////////////////////////////////////////
message RegisterRequest { // 서버가 시작되면 실행환경 정보와 함께 요청
	string version = 1;
}

message RegisterResponse {
	bool ok = 1; // false 인 경우 일정 시간 이후에 다시 register(서비스 시작) 시도(standby)
	string serverId = 2;

	// configuration as backend
	// enableServerManagement 는 local 설정에 따르기 때문에 필요 없을 것.
	bool enableUserSession = 12;

	// configuration as frontend
	string pushBackendAddress = 21;
	string userSessionBackendAddress = 22;
}

message UnregisterRequest {
	string serverId = 1;
}

message PingRequest {
	string serverId = 1;

	// hardware
	uint32 cpuUsagePercent = 2;
	uint64 memoryUsage = 3;
	uint64 freeHddBytes = 4;

	// service
	uint32 population = 101;

	// more service status here
}

message PingResponse {
	bool ok = 1; // false 인 경우 정책에 따라 서비스를 종료하거나, 다시 register 하거나 등등
}
/////////////////////////////////////////////////////////// ServerManagement //

// UserSession ////////////////////////////////////////////////////////////////
message AddUserRequest {
	string serverId = 1;
	string pushBackendAddress = 2;
	string userId = 3;

	bool force = 4; // 이미 연결중이라도 강제로 대체하고 Kick을 발생시킬 것.
}

message AddUserResponse {
	enum ResultType {
		OK = 0;
		FORCE_ADDED = 1;
		ALREADY_CONNECTED = 2;

		UNKNOWN_ERROR = 10; // 해당 서버에 이미 있다고 나오는 경우 등
	}
	ResultType result = 1;
}

message RemoveUserRequest {
	string serverId = 1;
	string userId = 2;
}

message RemoveUserResponse {
	enum ResultType {
		OK = 0;
		NOT_EXIST = 1;

		UNKNOWN_ERROR = 10;
	}
	ResultType result = 1;
}

message RemoveUsersRequest {
	string serverId = 1;
	string pushBackendAddress = 2;
}

message RemoveUsersResponse {
	uint32 removedUserCount = 1;
}

message IsOnlineRequest {
	string userId = 1;
}

message IsOnlineResponse {
	enum ResultType {
		ONLINE = 0;
		OFFLINE = 1;
	}
	ResultType result = 1;
}

message PushResponse {
	enum ResultType {
		OK = 0;
		NOT_EXIST = 1;

		UNKNOWN_ERROR = 10;
	}
	ResultType result = 1;
}

message KickUserRequest {
	string userId = 1;
}

message KickUserResponse {
	enum ResultType {
		OK = 0;
		NOT_EXIST = 1;

		UNKNOWN_ERROR = 10;
	}
	ResultType result = 1;
}
//////////////////////////////////////////////////////////////// UserSession //
