// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sample.proto
// Original file comments:
// client - server 의 service, rpc, message 정의.
// 서버 전용(server-server) 정의는 service project 내에 존재
//
#ifndef GRPC_sample_2eproto__INCLUDED
#define GRPC_sample_2eproto__INCLUDED

#include "sample.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace K2 {

// Services 
class Init final {
 public:
  static constexpr char const* service_full_name() {
    return "K2.Init";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::StateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::K2::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status State(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::StateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::K2::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::K2::Null* request, ::K2::StateResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::K2::Null* request, ::grpc::ServerAsyncResponseWriter< ::K2::StateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::K2::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_State<WithAsyncMethod_Login<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_State() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::Null, ::K2::StateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::Null* request, ::K2::StateResponse* response) { return this->State(context, request, response); }));}
    void SetMessageAllocatorFor_State(
        ::grpc::experimental::MessageAllocator< ::K2::Null, ::K2::StateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::Null, ::K2::StateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* State(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::LoginRequest, ::K2::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::K2::LoginRequest, ::K2::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::LoginRequest, ::K2::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_Login<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_Login<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_State() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_State() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->State(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* State(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::Null, ::K2::StateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::Null, ::K2::StateResponse>* streamer) {
                       return this->StreamedState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::Null,::K2::StateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::LoginRequest, ::K2::LoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::LoginRequest, ::K2::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::K2::LoginRequest* /*request*/, ::K2::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::LoginRequest,::K2::LoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Login<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Login<Service > > StreamedService;
};
// authorization 전에 사용할 수 있는 서비스

class Push final {
 public:
  static constexpr char const* service_full_name() {
    return "K2.Push";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::K2::PushResponse>> PushBegin(::grpc::ClientContext* context, const ::K2::Null& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::K2::PushResponse>>(PushBeginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>> AsyncPushBegin(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>>(AsyncPushBeginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>> PrepareAsyncPushBegin(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>>(PrepareAsyncPushBeginRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushBegin(::grpc::ClientContext* context, ::K2::Null* request, ::grpc::ClientReadReactor< ::K2::PushResponse>* reactor) = 0;
      #else
      virtual void PushBegin(::grpc::ClientContext* context, ::K2::Null* request, ::grpc::experimental::ClientReadReactor< ::K2::PushResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::K2::PushResponse>* PushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>* AsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::K2::PushResponse>* PrepareAsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::K2::PushResponse>> PushBegin(::grpc::ClientContext* context, const ::K2::Null& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::K2::PushResponse>>(PushBeginRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::K2::PushResponse>> AsyncPushBegin(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::K2::PushResponse>>(AsyncPushBeginRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::K2::PushResponse>> PrepareAsyncPushBegin(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::K2::PushResponse>>(PrepareAsyncPushBeginRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushBegin(::grpc::ClientContext* context, ::K2::Null* request, ::grpc::ClientReadReactor< ::K2::PushResponse>* reactor) override;
      #else
      void PushBegin(::grpc::ClientContext* context, ::K2::Null* request, ::grpc::experimental::ClientReadReactor< ::K2::PushResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::K2::PushResponse>* PushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request) override;
    ::grpc::ClientAsyncReader< ::K2::PushResponse>* AsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::K2::PushResponse>* PrepareAsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushBegin_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushBegin(::grpc::ServerContext* context, const ::K2::Null* request, ::grpc::ServerWriter< ::K2::PushResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushBegin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushBegin(::grpc::ServerContext* context, ::K2::Null* request, ::grpc::ServerAsyncWriter< ::K2::PushResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushBegin<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushBegin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::K2::Null, ::K2::PushResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::Null* request) { return this->PushBegin(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::K2::PushResponse>* PushBegin(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::K2::PushResponse>* PushBegin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PushBegin<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PushBegin<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushBegin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushBegin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushBegin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushBegin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->PushBegin(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PushBegin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* PushBegin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PushBegin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PushBegin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::K2::Null, ::K2::PushResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::K2::Null, ::K2::PushResponse>* streamer) {
                       return this->StreamedPushBegin(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PushBegin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushBegin(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::grpc::ServerWriter< ::K2::PushResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPushBegin(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::K2::Null,::K2::PushResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PushBegin<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_PushBegin<Service > StreamedService;
};

class PushSample final {
 public:
  static constexpr char const* service_full_name() {
    return "K2.PushSample";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // push responses
    virtual ::grpc::Status Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::K2::Null* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> AsyncBroadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(AsyncBroadacastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> PrepareAsyncBroadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(PrepareAsyncBroadacastRaw(context, request, cq));
    }
    // target all ; 운영자 공지 등에 사용될 것
    virtual ::grpc::Status Message(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::K2::Null* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> AsyncMessage(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(AsyncMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> PrepareAsyncMessage(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(PrepareAsyncMessageRaw(context, request, cq));
    }
    // target other ; 지정한 대상을 찾아 push
    virtual ::grpc::Status Hello(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::Null* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> AsyncHello(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> PrepareAsyncHello(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    // target self ; 요청하는 서버와 push 서버가 다르기 때문에 jwt 의 pushBackendAddress 를 이용해 push
    virtual ::grpc::Status Kick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::K2::Null* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> AsyncKick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(AsyncKickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>> PrepareAsyncKick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>>(PrepareAsyncKickRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // push responses
      virtual void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // target all ; 운영자 공지 등에 사용될 것
      virtual void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // target other ; 지정한 대상을 찾아 push
      virtual void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // target self ; 요청하는 서버와 push 서버가 다르기 때문에 jwt 의 pushBackendAddress 를 이용해 push
      virtual void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* AsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* PrepareAsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* AsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* PrepareAsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* AsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* AsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::Null>* PrepareAsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::K2::Null* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> AsyncBroadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(AsyncBroadacastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> PrepareAsyncBroadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(PrepareAsyncBroadacastRaw(context, request, cq));
    }
    ::grpc::Status Message(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::K2::Null* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> AsyncMessage(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(AsyncMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> PrepareAsyncMessage(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(PrepareAsyncMessageRaw(context, request, cq));
    }
    ::grpc::Status Hello(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::Null* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> AsyncHello(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(AsyncHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> PrepareAsyncHello(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(PrepareAsyncHelloRaw(context, request, cq));
    }
    ::grpc::Status Kick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::K2::Null* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> AsyncKick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(AsyncKickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>> PrepareAsyncKick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::Null>>(PrepareAsyncKickRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* AsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* PrepareAsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* AsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* PrepareAsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* AsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* AsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::Null>* PrepareAsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Broadacast_;
    const ::grpc::internal::RpcMethod rpcmethod_Message_;
    const ::grpc::internal::RpcMethod rpcmethod_Hello_;
    const ::grpc::internal::RpcMethod rpcmethod_Kick_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // push responses
    virtual ::grpc::Status Broadacast(::grpc::ServerContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response);
    // target all ; 운영자 공지 등에 사용될 것
    virtual ::grpc::Status Message(::grpc::ServerContext* context, const ::K2::MessageRequest* request, ::K2::Null* response);
    // target other ; 지정한 대상을 찾아 push
    virtual ::grpc::Status Hello(::grpc::ServerContext* context, const ::K2::Null* request, ::K2::Null* response);
    // target self ; 요청하는 서버와 push 서버가 다르기 때문에 jwt 의 pushBackendAddress 를 이용해 push
    virtual ::grpc::Status Kick(::grpc::ServerContext* context, const ::K2::KickRequest* request, ::K2::Null* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Broadacast() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadacast(::grpc::ServerContext* context, ::K2::BroadacastRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::Null>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Message() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessage(::grpc::ServerContext* context, ::K2::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::Null>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hello() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::K2::Null* request, ::grpc::ServerAsyncResponseWriter< ::K2::Null>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Kick() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKick(::grpc::ServerContext* context, ::K2::KickRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::Null>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Broadacast<WithAsyncMethod_Message<WithAsyncMethod_Hello<WithAsyncMethod_Kick<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Broadacast() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::BroadacastRequest, ::K2::Null>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::BroadacastRequest* request, ::K2::Null* response) { return this->Broadacast(context, request, response); }));}
    void SetMessageAllocatorFor_Broadacast(
        ::grpc::experimental::MessageAllocator< ::K2::BroadacastRequest, ::K2::Null>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::BroadacastRequest, ::K2::Null>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Broadacast(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Broadacast(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Message() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::MessageRequest, ::K2::Null>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::MessageRequest* request, ::K2::Null* response) { return this->Message(context, request, response); }));}
    void SetMessageAllocatorFor_Message(
        ::grpc::experimental::MessageAllocator< ::K2::MessageRequest, ::K2::Null>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::MessageRequest, ::K2::Null>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Message(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Message(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Hello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::Null, ::K2::Null>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::Null* request, ::K2::Null* response) { return this->Hello(context, request, response); }));}
    void SetMessageAllocatorFor_Hello(
        ::grpc::experimental::MessageAllocator< ::K2::Null, ::K2::Null>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::Null, ::K2::Null>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Hello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Kick() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::KickRequest, ::K2::Null>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::KickRequest* request, ::K2::Null* response) { return this->Kick(context, request, response); }));}
    void SetMessageAllocatorFor_Kick(
        ::grpc::experimental::MessageAllocator< ::K2::KickRequest, ::K2::Null>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::KickRequest, ::K2::Null>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Kick(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Kick(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Broadacast<ExperimentalWithCallbackMethod_Message<ExperimentalWithCallbackMethod_Hello<ExperimentalWithCallbackMethod_Kick<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Broadacast<ExperimentalWithCallbackMethod_Message<ExperimentalWithCallbackMethod_Hello<ExperimentalWithCallbackMethod_Kick<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Broadacast() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Message() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hello() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Kick() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Broadacast() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadacast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Message() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hello() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Kick() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKick(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Broadacast() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Broadacast(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Broadacast(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Broadacast(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Message() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Message(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Message(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Hello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hello(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Hello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Hello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Kick() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Kick(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Kick(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Kick(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Broadacast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Broadacast() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::BroadacastRequest, ::K2::Null>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::BroadacastRequest, ::K2::Null>* streamer) {
                       return this->StreamedBroadacast(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Broadacast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Broadacast(::grpc::ServerContext* /*context*/, const ::K2::BroadacastRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadacast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::BroadacastRequest,::K2::Null>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Message() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::MessageRequest, ::K2::Null>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::MessageRequest, ::K2::Null>* streamer) {
                       return this->StreamedMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::K2::MessageRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::MessageRequest,::K2::Null>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hello() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::Null, ::K2::Null>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::Null, ::K2::Null>* streamer) {
                       return this->StreamedHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hello(::grpc::ServerContext* /*context*/, const ::K2::Null* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::Null,::K2::Null>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Kick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Kick() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::KickRequest, ::K2::Null>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::KickRequest, ::K2::Null>* streamer) {
                       return this->StreamedKick(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Kick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Kick(::grpc::ServerContext* /*context*/, const ::K2::KickRequest* /*request*/, ::K2::Null* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKick(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::KickRequest,::K2::Null>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Broadacast<WithStreamedUnaryMethod_Message<WithStreamedUnaryMethod_Hello<WithStreamedUnaryMethod_Kick<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Broadacast<WithStreamedUnaryMethod_Message<WithStreamedUnaryMethod_Hello<WithStreamedUnaryMethod_Kick<Service > > > > StreamedService;
};

class SimpleSample final {
 public:
  static constexpr char const* service_full_name() {
    return "K2.SimpleSample";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::K2::SampleInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>> AsyncSampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>>(AsyncSampleInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>> PrepareAsyncSampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>>(PrepareAsyncSampleInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::K2::SampleCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>> AsyncSampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>>(AsyncSampleCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>> PrepareAsyncSampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>>(PrepareAsyncSampleCommandRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>* AsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleInfoResponse>* PrepareAsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>* AsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::K2::SampleCommandResponse>* PrepareAsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::K2::SampleInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>> AsyncSampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>>(AsyncSampleInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>> PrepareAsyncSampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>>(PrepareAsyncSampleInfoRaw(context, request, cq));
    }
    ::grpc::Status SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::K2::SampleCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>> AsyncSampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>>(AsyncSampleCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>> PrepareAsyncSampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>>(PrepareAsyncSampleCommandRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>* AsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>* PrepareAsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>* AsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>* PrepareAsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SampleInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SampleCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SampleInfo(::grpc::ServerContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response);
    virtual ::grpc::Status SampleCommand(::grpc::ServerContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SampleInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSampleInfo(::grpc::ServerContext* context, ::K2::SampleInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::SampleInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SampleCommand() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSampleCommand(::grpc::ServerContext* context, ::K2::SampleCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::K2::SampleCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SampleInfo<WithAsyncMethod_SampleCommand<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SampleInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response) { return this->SampleInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SampleInfo(
        ::grpc::experimental::MessageAllocator< ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SampleInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SampleInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SampleCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response) { return this->SampleCommand(context, request, response); }));}
    void SetMessageAllocatorFor_SampleCommand(
        ::grpc::experimental::MessageAllocator< ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SampleCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SampleCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SampleInfo<ExperimentalWithCallbackMethod_SampleCommand<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SampleInfo<ExperimentalWithCallbackMethod_SampleCommand<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SampleInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SampleCommand() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SampleInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSampleInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SampleCommand() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSampleCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SampleInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SampleInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SampleInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SampleInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SampleCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SampleCommand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SampleCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SampleCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SampleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SampleInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>* streamer) {
                       return this->StreamedSampleInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SampleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SampleInfo(::grpc::ServerContext* /*context*/, const ::K2::SampleInfoRequest* /*request*/, ::K2::SampleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSampleInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::SampleInfoRequest,::K2::SampleInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SampleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SampleCommand() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>* streamer) {
                       return this->StreamedSampleCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SampleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SampleCommand(::grpc::ServerContext* /*context*/, const ::K2::SampleCommandRequest* /*request*/, ::K2::SampleCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSampleCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::K2::SampleCommandRequest,::K2::SampleCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SampleInfo<WithStreamedUnaryMethod_SampleCommand<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SampleInfo<WithStreamedUnaryMethod_SampleCommand<Service > > StreamedService;
};

}  // namespace K2


#endif  // GRPC_sample_2eproto__INCLUDED
