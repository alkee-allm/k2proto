// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sample.proto

#include "sample.pb.h"
#include "sample.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace K2 {

static const char* Init_method_names[] = {
  "/K2.Init/State",
  "/K2.Init/Login",
};

std::unique_ptr< Init::Stub> Init::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Init::Stub> stub(new Init::Stub(channel));
  return stub;
}

Init::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_State_(Init_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(Init_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Init::Stub::State(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::StateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_State_, context, request, response);
}

void Init::Stub::experimental_async::State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Init::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Init::Stub::experimental_async::State(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

void Init::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::StateResponse>* Init::Stub::AsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::StateResponse>::Create(channel_.get(), cq, rpcmethod_State_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::StateResponse>* Init::Stub::PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::StateResponse>::Create(channel_.get(), cq, rpcmethod_State_, context, request, false);
}

::grpc::Status Init::Stub::Login(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::K2::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void Init::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Init::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Init::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void Init::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>* Init::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::LoginResponse>* Init::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::K2::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

Init::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Init_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Init::Service, ::K2::Null, ::K2::StateResponse>(
          [](Init::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::Null* req,
             ::K2::StateResponse* resp) {
               return service->State(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Init_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Init::Service, ::K2::LoginRequest, ::K2::LoginResponse>(
          [](Init::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::LoginRequest* req,
             ::K2::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

Init::Service::~Service() {
}

::grpc::Status Init::Service::State(::grpc::ServerContext* context, const ::K2::Null* request, ::K2::StateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Init::Service::Login(::grpc::ServerContext* context, const ::K2::LoginRequest* request, ::K2::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Push_method_names[] = {
  "/K2.Push/PushBegin",
};

std::unique_ptr< Push::Stub> Push::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Push::Stub> stub(new Push::Stub(channel));
  return stub;
}

Push::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushBegin_(Push_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::K2::PushResponse>* Push::Stub::PushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::K2::PushResponse>::Create(channel_.get(), rpcmethod_PushBegin_, context, request);
}

void Push::Stub::experimental_async::PushBegin(::grpc::ClientContext* context, ::K2::Null* request, ::grpc::experimental::ClientReadReactor< ::K2::PushResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::K2::PushResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PushBegin_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::K2::PushResponse>* Push::Stub::AsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::K2::PushResponse>::Create(channel_.get(), cq, rpcmethod_PushBegin_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::K2::PushResponse>* Push::Stub::PrepareAsyncPushBeginRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::K2::PushResponse>::Create(channel_.get(), cq, rpcmethod_PushBegin_, context, request, false, nullptr);
}

Push::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Push_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Push::Service, ::K2::Null, ::K2::PushResponse>(
          [](Push::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::Null* req,
             ::grpc_impl::ServerWriter<::K2::PushResponse>* writer) {
               return service->PushBegin(ctx, req, writer);
             }, this)));
}

Push::Service::~Service() {
}

::grpc::Status Push::Service::PushBegin(::grpc::ServerContext* context, const ::K2::Null* request, ::grpc::ServerWriter< ::K2::PushResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PushSample_method_names[] = {
  "/K2.PushSample/Broadacast",
  "/K2.PushSample/Message",
  "/K2.PushSample/Hello",
  "/K2.PushSample/Kick",
};

std::unique_ptr< PushSample::Stub> PushSample::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PushSample::Stub> stub(new PushSample::Stub(channel));
  return stub;
}

PushSample::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Broadacast_(PushSample_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Message_(PushSample_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hello_(PushSample_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kick_(PushSample_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PushSample::Stub::Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::K2::Null* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Broadacast_, context, request, response);
}

void PushSample::Stub::experimental_async::Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Broadacast_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Broadacast_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Broadacast(::grpc::ClientContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Broadacast_, context, request, response, reactor);
}

void PushSample::Stub::experimental_async::Broadacast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Broadacast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::AsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Broadacast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::PrepareAsyncBroadacastRaw(::grpc::ClientContext* context, const ::K2::BroadacastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Broadacast_, context, request, false);
}

::grpc::Status PushSample::Stub::Message(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::K2::Null* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Message_, context, request, response);
}

void PushSample::Stub::experimental_async::Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Message_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Message_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Message(::grpc::ClientContext* context, const ::K2::MessageRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Message_, context, request, response, reactor);
}

void PushSample::Stub::experimental_async::Message(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::AsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Message_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::PrepareAsyncMessageRaw(::grpc::ClientContext* context, const ::K2::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Message_, context, request, false);
}

::grpc::Status PushSample::Stub::Hello(::grpc::ClientContext* context, const ::K2::Null& request, ::K2::Null* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Hello_, context, request, response);
}

void PushSample::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::K2::Null* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, reactor);
}

void PushSample::Stub::experimental_async::Hello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Hello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::K2::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Hello_, context, request, false);
}

::grpc::Status PushSample::Stub::Kick(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::K2::Null* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Kick_, context, request, response);
}

void PushSample::Stub::experimental_async::Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Kick_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Kick_, context, request, response, std::move(f));
}

void PushSample::Stub::experimental_async::Kick(::grpc::ClientContext* context, const ::K2::KickRequest* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Kick_, context, request, response, reactor);
}

void PushSample::Stub::experimental_async::Kick(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::Null* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Kick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::AsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Kick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::Null>* PushSample::Stub::PrepareAsyncKickRaw(::grpc::ClientContext* context, const ::K2::KickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::Null>::Create(channel_.get(), cq, rpcmethod_Kick_, context, request, false);
}

PushSample::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushSample_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushSample::Service, ::K2::BroadacastRequest, ::K2::Null>(
          [](PushSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::BroadacastRequest* req,
             ::K2::Null* resp) {
               return service->Broadacast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushSample_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushSample::Service, ::K2::MessageRequest, ::K2::Null>(
          [](PushSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::MessageRequest* req,
             ::K2::Null* resp) {
               return service->Message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushSample_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushSample::Service, ::K2::Null, ::K2::Null>(
          [](PushSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::Null* req,
             ::K2::Null* resp) {
               return service->Hello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushSample_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushSample::Service, ::K2::KickRequest, ::K2::Null>(
          [](PushSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::KickRequest* req,
             ::K2::Null* resp) {
               return service->Kick(ctx, req, resp);
             }, this)));
}

PushSample::Service::~Service() {
}

::grpc::Status PushSample::Service::Broadacast(::grpc::ServerContext* context, const ::K2::BroadacastRequest* request, ::K2::Null* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PushSample::Service::Message(::grpc::ServerContext* context, const ::K2::MessageRequest* request, ::K2::Null* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PushSample::Service::Hello(::grpc::ServerContext* context, const ::K2::Null* request, ::K2::Null* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PushSample::Service::Kick(::grpc::ServerContext* context, const ::K2::KickRequest* request, ::K2::Null* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SimpleSample_method_names[] = {
  "/K2.SimpleSample/SampleInfo",
  "/K2.SimpleSample/SampleCommand",
};

std::unique_ptr< SimpleSample::Stub> SimpleSample::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SimpleSample::Stub> stub(new SimpleSample::Stub(channel));
  return stub;
}

SimpleSample::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SampleInfo_(SimpleSample_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SampleCommand_(SimpleSample_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SimpleSample::Stub::SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::K2::SampleInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SampleInfo_, context, request, response);
}

void SimpleSample::Stub::experimental_async::SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SampleInfo_, context, request, response, std::move(f));
}

void SimpleSample::Stub::experimental_async::SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SampleInfo_, context, request, response, std::move(f));
}

void SimpleSample::Stub::experimental_async::SampleInfo(::grpc::ClientContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SampleInfo_, context, request, response, reactor);
}

void SimpleSample::Stub::experimental_async::SampleInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SampleInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>* SimpleSample::Stub::AsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::SampleInfoResponse>::Create(channel_.get(), cq, rpcmethod_SampleInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::SampleInfoResponse>* SimpleSample::Stub::PrepareAsyncSampleInfoRaw(::grpc::ClientContext* context, const ::K2::SampleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::SampleInfoResponse>::Create(channel_.get(), cq, rpcmethod_SampleInfo_, context, request, false);
}

::grpc::Status SimpleSample::Stub::SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::K2::SampleCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SampleCommand_, context, request, response);
}

void SimpleSample::Stub::experimental_async::SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SampleCommand_, context, request, response, std::move(f));
}

void SimpleSample::Stub::experimental_async::SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SampleCommand_, context, request, response, std::move(f));
}

void SimpleSample::Stub::experimental_async::SampleCommand(::grpc::ClientContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SampleCommand_, context, request, response, reactor);
}

void SimpleSample::Stub::experimental_async::SampleCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::K2::SampleCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SampleCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>* SimpleSample::Stub::AsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::SampleCommandResponse>::Create(channel_.get(), cq, rpcmethod_SampleCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::K2::SampleCommandResponse>* SimpleSample::Stub::PrepareAsyncSampleCommandRaw(::grpc::ClientContext* context, const ::K2::SampleCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::K2::SampleCommandResponse>::Create(channel_.get(), cq, rpcmethod_SampleCommand_, context, request, false);
}

SimpleSample::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleSample_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleSample::Service, ::K2::SampleInfoRequest, ::K2::SampleInfoResponse>(
          [](SimpleSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::SampleInfoRequest* req,
             ::K2::SampleInfoResponse* resp) {
               return service->SampleInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleSample_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleSample::Service, ::K2::SampleCommandRequest, ::K2::SampleCommandResponse>(
          [](SimpleSample::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::K2::SampleCommandRequest* req,
             ::K2::SampleCommandResponse* resp) {
               return service->SampleCommand(ctx, req, resp);
             }, this)));
}

SimpleSample::Service::~Service() {
}

::grpc::Status SimpleSample::Service::SampleInfo(::grpc::ServerContext* context, const ::K2::SampleInfoRequest* request, ::K2::SampleInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleSample::Service::SampleCommand(::grpc::ServerContext* context, const ::K2::SampleCommandRequest* request, ::K2::SampleCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace K2

